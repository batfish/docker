name: Pre-commit (reusable)
on:
  workflow_call:
    inputs:
      BATFISH_GITHUB_BATFISH_REPO:
        description: 'Git repo containing Batfish'
        required: false
        default: 'batfish/batfish'
        type: string
      BATFISH_GITHUB_BATFISH_REF:
        description: 'Git ref for Batfish version to release'
        required: false
        default: 'master'
        type: string
      BATFISH_GITHUB_PYBATFISH_REPO:
        description: 'Git repo containing Pybatfish'
        required: false
        default: 'batfish/pybatfish'
        type: string
      BATFISH_GITHUB_PYBATFISH_REF:
        description: 'Git ref for Pybatfish version to release'
        required: false
        default: 'master'
        type: string
    outputs:
      bf_version:
        description: "Batfish version string (in the format YYYY.MM.DD.####)"
        value: ${{ jobs.bf_version.outputs.bf_version }}

jobs:
  bf_version:
    runs-on: ubuntu-latest
    steps:
      - name: Get dotted date string
        id: date_dotted
        run: echo "::set-output name=ymd_dotted::$(date +'%Y.%m.%d')"
      - name: Get Batfish version string
        id: get_version
        run: echo "::set-output name=bf_version::${{ steps.date_dotted.outputs.ymd_dotted }}.${{ github.run_number }}"
    outputs:
      bf_version: ${{ steps.get_version.outputs.bf_version }}
  bf_build:
    runs-on: ubuntu-latest
    needs:
      - bf_version
      - get_date
    steps:
      - name: Get date
        id: date
        run: echo "::set-output name=ymd::$(date +'%Y-%m-%d')"
      - name: Checkout Docker repo
        uses: actions/checkout@v3
      - name: Checkout Batfish repo
        uses: actions/checkout@v3
        with:
          repository: "${{ inputs.BATFISH_GITHUB_BATFISH_REPO }}"
          path: batfish
          ref: "${{ inputs.BATFISH_GITHUB_BATFISH_REF }}"
      - name: Maven cache
        uses: actions/cache@v3
        with:
          path: "~/.m2/repository"
          key: ${{runner.os}}-maven-${{ hashFiles('**/pom.xml') }}-build-${{ steps.date.outputs.ymd }}
          restore-keys: |
            ${{runner.os}}-maven-${{ hashFiles('**/pom.xml') }}-build-
            ${{runner.os}}-maven-${{ hashFiles('**/pom.xml') }}-
            ${{runner.os}}-maven-
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build JAR
        run: |
          mvn -B -f batfish/projects versions:set -DnewVersion=${{ needs.bf_version.outputs.bf_version }}
          mvn -B -f batfish/projects package
          cp batfish/projects/allinone/target/allinone-bundle*.jar allinone-bundle.jar
      - name: Questions tar
        run: |
          TMP_DIR=$(mktemp -d)
          QUESTION_DIR=${TMP_DIR}/questions
          mkdir -p ${QUESTION_DIR}
          cp -r batfish/questions/{stable,experimental} ${QUESTION_DIR}
          tar -czf questions.tgz -C ${TMP_DIR} questions
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: bf_jar
          path: allinone-bundle.jar
      - name: Upload questions
        uses: actions/upload-artifact@v3
        with:
          name: bf_questions
          path: questions.tgz
  pybf_build:
    runs-on: ubuntu-latest
    needs:
      - bf_version
    steps:
      - uses: actions/checkout@v3
      - name: Checkout pybf repo
        uses: actions/checkout@v3
        with:
          repository: "${{ inputs.BATFISH_GITHUB_PYBATFISH_REPO }}"
          path: pybatfish
          ref: "${{ inputs.BATFISH_GITHUB_PYBATFISH_REF }}"
      - name: Update version number
        run: |
          cd pybatfish
          sed -i.bak -e "s/^__version__ = .*$/__version__ = \"${{ needs.bf_version.outputs.bf_version }}\"/" pybatfish/__init__.py
          rm -f pybatfish/__init__.py.bak
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build wheel
        run: |
          cd pybatfish
          pip install wheel 'setuptools==45.2.0'
          python setup.py bdist_wheel
      - name: Tar tests and notebooks
        run: |
          tar -czf pybatfish-tests.tgz -C pybatfish tests
          tar -czf pybatfish-notebooks.tgz -C pybatfish jupyter_notebooks
      - name: Upload pybf wheel
        uses: actions/upload-artifact@v3
        with:
          name: pybf_whl
          path: pybatfish/dist/pybatfish*.whl
      - name: Upload tests
        uses: actions/upload-artifact@v3
        with:
          name: pybf_tests
          path: pybatfish-tests.tgz
      - name: Upload notebooks
        uses: actions/upload-artifact@v3
        with:
          name: pybf_notebooks
          path: pybatfish-notebooks.tgz
  bf_image_build:
    runs-on: ubuntu-latest
    needs:
      - bf_build
      - bf_version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download jar
        uses: actions/download-artifact@v3
        with:
          name: bf_jar
      - name: Download questions
        uses: actions/download-artifact@v3
        with:
          name: bf_questions
      - name: Setup assets
        run: |
          mkdir assets
          tar xzf questions.tgz -C assets
          cp allinone-bundle.jar assets
          cp log4j2.yaml assets
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build
        uses: docker/build-push-action@v3
        with:
          push: false
          file: batfish.dockerfile
          build-args: ASSETS=./assets
          tags: batfish/batfish:test-${{ needs.bf_version.outputs.bf_version }}
          outputs: type=docker,dest=/tmp/bf.tar
          context: .
      - name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: bf_image
          path: /tmp/bf.tar
  allinone_image_build:
    runs-on: ubuntu-latest
    needs:
      - bf_build
      - pybf_build
      - bf_version
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download jar
        uses: actions/download-artifact@v3
        with:
          name: bf_jar
      - name: Download questions
        uses: actions/download-artifact@v3
        with:
          name: bf_questions
      - name: Download pybf whl
        uses: actions/download-artifact@v3
        with:
          name: pybf_whl
      - name: Download pybf notebooks
        uses: actions/download-artifact@v3
        with:
          name: pybf_notebooks
      - name: Setup assets
        run: |
          mkdir assets
          tar xzf questions.tgz -C assets
          cp allinone-bundle.jar assets
          cp log4j2.yaml assets
          cp pybatfish-*.whl assets
          TEMP_DIR=$(mktemp -d)
          tar xzf pybatfish-notebooks.tgz -C ${TEMP_DIR}
          cp -r ${TEMP_DIR}/jupyter_notebooks/ assets/notebooks/
          # Script that starts Batfish + Jupyter server
          cp wrapper.sh assets
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build
        uses: docker/build-push-action@v3
        with:
          push: false
          file: allinone.dockerfile
          build-args: ASSETS=./assets
          tags: batfish/allinone:test-${{ needs.bf_version.outputs.bf_version }}
          outputs: type=docker,dest=/tmp/allinone.tar
          context: .
      - name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: allinone_image
          path: /tmp/allinone.tar
