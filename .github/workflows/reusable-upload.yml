name: Artifact Upload (reusable; precommit and integration test workflows must run before this)
on:
  workflow_call:
    inputs:
      bf_version:
        description: "Batfish version string (in the format YYYY.MM.DD.####)"
        required: true
        type: string
      queue_prod_release:
        description: "Whether or not to queue the production artifact release. Dev/test artifacts are always released."
        required: true
        type: boolean
      test_tag:
        description: "Tag for test/dev containers (note: Pybatfish release 'tags' must be numeric and use `bf_version` instead)"
        required: true
        type: string
      release_tag:
        description: "Tag for release containers (note: Pybatfish release 'tags' must be numeric and use `bf_version` instead)"
        required: true
        type: string
      BATFISH_GITHUB_BATFISH_REPO:
        description: 'Git repo containing Batfish'
        required: false
        default: 'batfish/batfish'
        type: string
      BATFISH_GITHUB_PYBATFISH_REPO:
        description: 'Git repo containing Pybatfish'
        required: false
        default: 'batfish/pybatfish'
        type: string
      BATFISH_GITHUB_PYBATFISH_REF:
        description: 'Git ref for Pybatfish version to release'
        required: false
        default: 'master'
        type: string
    secrets:
      # Only needed when `queue_prod_release` is true
      OPEN_SOURCE_BUILDKITEBOT_PUBLIC_REPO_TOKEN:
        required: false
      PYBATFISH_TEST_PYPI_TOKEN:
        required: true
      PYBATFISH_PYPI_TOKEN:
        required: true
      BATFISH_DOCKER_LOGIN_TOKEN:
        required: true

env:
  BATFISH_DOCKER_LOGIN_USERNAME: batfishbuildkitebot

jobs:
  check_repos:
    if: inputs.BATFISH_GITHUB_BATFISH_REPO != 'batfish/batfish' || inputs.BATFISH_GITHUB_PYBATFISH_REPO != 'batfish/pybatfish'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo Cannot upload from a repo other than batfish/batfish and batfish/pybatfish
          exit 1
  dev_image_upload:
    if: inputs.BATFISH_GITHUB_BATFISH_REPO == 'batfish/batfish' && inputs.BATFISH_GITHUB_PYBATFISH_REPO == 'batfish/pybatfish'
    runs-on: ubuntu-latest
    steps:
      - name: Download bf image
        uses: actions/download-artifact@v3
        with:
          name: bf_image
      - name: Download allinone image
        uses: actions/download-artifact@v3
        with:
          name: allinone_image
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ env.BATFISH_DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.BATFISH_DOCKER_LOGIN_TOKEN }}
      - name: Upload Batfish image
        run: |
          docker load < bf.tar
          docker push batfish/batfish:${{ inputs.test_tag }}
      - name: Upload Allinone image
        run: |
          docker load < allinone.tar
          docker push batfish/allinone:${{ inputs.test_tag }}
  dev_whl_upload:
    if: inputs.BATFISH_GITHUB_BATFISH_REPO == 'batfish/batfish' && inputs.BATFISH_GITHUB_PYBATFISH_REPO == 'batfish/pybatfish'
    runs-on: ubuntu-latest
    steps:
      - name: Download pybf whl
        uses: actions/download-artifact@v3
        with:
          name: pybf_whl
      - name: Prep whl
        run: |
          mkdir dist
          mv pybatfish*.whl dist/
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYBATFISH_TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Verify uploaded artifact
        run: |
          MAX_RETRIES=3
          COUNTER=0
          while ! pip install -i https://test.pypi.org/simple --extra-index-url https://pypi.org/simple pybatfish==${{ inputs.bf_version }}
          do
            if [ $COUNTER -gt $MAX_RETRIES ]; then
              echo "Could not install Pybf"
              exit 1
            fi
            sleep 5
            ((COUNTER+=1))
          done
          echo "Pybf installed"
          # Assume successful import means a working artifact
          python -c "from pybatfish.client.session import Session"
          echo "Pybf import was successful!"

  prod_image_upload:
    if: inputs.queue_prod_release && inputs.BATFISH_GITHUB_BATFISH_REPO == 'batfish/batfish' && inputs.BATFISH_GITHUB_PYBATFISH_REPO == 'batfish/pybatfish'
    environment: Release Containers
    runs-on: ubuntu-latest
    steps:
      - name: Download bf image
        uses: actions/download-artifact@v3
        with:
          name: bf_image
      - name: Download allinone image
        uses: actions/download-artifact@v3
        with:
          name: allinone_image
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ env.BATFISH_DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.BATFISH_DOCKER_LOGIN_TOKEN }}
      - name: Upload Batfish image
        run: |
          TEST_TAG="${{ inputs.test_tag }}"
          RELEASE_TAG="${{ inputs.release_tag }}"
          docker load < bf.tar
          # Re-tag with release tag and latest tag
          docker tag "batfish/batfish:${TEST_TAG}" "batfish/batfish:${RELEASE_TAG}"
          docker tag "batfish/batfish:${TEST_TAG}" "batfish/batfish:latest"
          echo placeholder for pushing "batfish/batfish:${RELEASE_TAG}" and "batfish/batfish:latest"
          # TODO uncomment these
          #docker push "batfish/batfish:${RELEASE_TAG}"
          #docker push "batfish/batfish:latest"
      - name: Upload Allinone image
        run: |
          TEST_TAG="${{ inputs.test_tag }}"
          RELEASE_TAG="${{ inputs.release_tag }}"
          docker load < allinone.tar
          # Re-tag with release tag and latest tag
          docker tag "batfish/allinone:${TEST_TAG}" "batfish/allinone:${RELEASE_TAG}"
          docker tag "batfish/allinone:${TEST_TAG}" "batfish/allinone:latest"
          echo placeholder for pushing "batfish/allinone:${RELEASE_TAG}" and "batfish/allinone:latest"
          # TODO uncomment these
          #docker push "batfish/allinone:${RELEASE_TAG}"
          #docker push "batfish/allinone:latest"
  prod_whl_upload:
    if: inputs.queue_prod_release && inputs.BATFISH_GITHUB_BATFISH_REPO == 'batfish/batfish' && inputs.BATFISH_GITHUB_PYBATFISH_REPO == 'batfish/pybatfish'
    environment: Release Pybatfish
    runs-on: ubuntu-latest
    steps:
      - name: Download pybf whl
        uses: actions/download-artifact@v3
        with:
          name: pybf_whl
      - name: Prep whl
        run: |
          mkdir dist
          mv pybatfish*.whl dist/
      - name: Checkout pybf repo
        uses: actions/checkout@v3
        with:
          repository: "${{ inputs.BATFISH_GITHUB_PYBATFISH_REPO }}"
          path: pybatfish
          ref: "${{ inputs.BATFISH_GITHUB_PYBATFISH_REF }}"
          token: ${{ secrets.OPEN_SOURCE_BUILDKITEBOT_PUBLIC_REPO_TOKEN }}
      - name: Push test branch
        run: |
          cd pybatfish
          sed -i.bak -e "s/^__version__ = .*$/__version__ = \"${{ inputs.bf_version }}\"/" pybatfish/__init__.py
          rm -f pybatfish/__init__.py.bak
          # TODO update the branch name to release-
          BRANCH_NAME="github-actions-test-${{ inputs.bf_version }}"
          git checkout origin/master -b "$BRANCH_NAME"
          git config user.name "open-source-buildkitebot"
          git config user.email "open-source-buildkitebot@intentionet.com"
          git commit -am "Prepare for release ${{ inputs.bf_version }}: Updating version number"
          git push -u origin "$BRANCH_NAME"
      # TODO run these steps to actually publish the artifact
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYBATFISH_PYPI_TOKEN }}
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.9
      # - name: Verify uploaded artifact
      #   run: |
      #     MAX_RETRIES=3
      #     COUNTER=0
      #     while ! pip install pybatfish==${{ inputs.bf_version }}
      #     do
      #       if [ $COUNTER -gt $MAX_RETRIES ]; then
      #         echo "Could not install Pybf"
      #         exit 1
      #       fi
      #       sleep 5
      #       ((COUNTER+=1))
      #     done
      #     echo "Pybf installed"
      #     # Assume successful import means a working artifact
      #     python -c "from pybatfish.client.session import Session"
      #     echo "Pybf import was successful!"
