name: Integration Tests (reusable; depends on precommit workflow running before this)
on:
  workflow_call:
    inputs:
      bf_version:
        description: "Batfish version string (in the format YYYY.MM.DD.####)"
        required: true
        type: string
      bf_test_artifact_age:
        description: "Test all artifacts released in the last N days"
        required: false
        default: "90"
        type: string
      bf_min_release_test_count:
        description: "Minimum number of Batfish releases to test (will look futher back than `bf_test_artifact_age` if needed)"
        required: false
        default: "3"
        type: string
      pybf_min_release_test_count:
        description: "Minimum number of Pybatfish releases to test (will look futher back than `bf_test_artifact_age` if needed)"
        required: false
        default: "1" # todo: increment back to 3 once we make more releases that do not require removed APIs
        type: string
      run_cross_version_tests:
        description: "Whether or not to run cross-version tests"
        required: true
        type: boolean

jobs:
  get_bf_versions:
    runs-on: ubuntu-latest
    if: inputs.run_cross_version_tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install requests
        run: python -m pip install 'requests==2.23.0'
      - id: set_versions
        run: |
          # --pattern=202 filters container tags to those containing "202", e.g. "2022.08.22.1234"
          DATE_TAGS="$(python get_docker_versions.py --image batfish/batfish --days=${{ inputs.bf_test_artifact_age }} --minimum=${{ inputs.bf_min_release_test_count }} --json-format --pattern=202)"
          echo "versions=$DATE_TAGS" >> $GITHUB_OUTPUT
    outputs:
      versions: ${{ steps.set_versions.outputs.versions }}
  get_pybf_versions:
    runs-on: ubuntu-latest
    if: inputs.run_cross_version_tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install requests
        run: python -m pip install 'requests==2.23.0'
      - id: set_versions
        run: |
          PYBF_TAGS="$(python get_pypi_versions.py --package pybatfish --days=${{ inputs.bf_test_artifact_age }} --minimum=${{ inputs.pybf_min_release_test_count }} --json-format)"
          echo "versions=$PYBF_TAGS" >> $GITHUB_OUTPUT
    outputs:
      versions: ${{ steps.set_versions.outputs.versions }}
  bf_cross_version_tests:
    runs-on: ubuntu-latest
    if: inputs.run_cross_version_tests
    needs:
      - get_bf_versions
    strategy:
      matrix:
        bf_version: ${{ fromJson(needs.get_bf_versions.outputs.versions) }}
    services:
      bf:
        image: batfish/batfish:${{ matrix.bf_version }}
        ports:
          - 9997:9997
          - 9996:9996
    steps:
      - uses: actions/checkout@v4
      - name: Download pybf whl
        uses: actions/download-artifact@v4
        with:
          name: pybf_whl
      - name: Download pybf tests
        uses: actions/download-artifact@v4
        with:
          name: pybf_tests
      - name: Download pybf notebooks
        uses: actions/download-artifact@v4
        with:
          name: pybf_notebooks
      - name: Download questions
        uses: actions/download-artifact@v4
        with:
          name: bf_questions
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Setup pybf
        run: pip install "$(ls pybatfish-*.whl)"[dev]
      - name: Wait for bf
        run: tests/wait_for_bf.sh
      - name: Run tests
        run: |
          TEMP_DIR=$(mktemp -d)
          tar xzf pybatfish-tests.tgz -C ${TEMP_DIR}
          tar xzf pybatfish-notebooks.tgz -C ${TEMP_DIR}
          pushd ${TEMP_DIR}
          pytest -k "not test_notebook_output" "${TEMP_DIR}/tests/integration"
          popd
  pybf_cross_version_tests:
    runs-on: ubuntu-latest
    if: inputs.run_cross_version_tests
    needs:
      - get_pybf_versions
    strategy:
      matrix:
        pybf_version: ${{ fromJson(needs.get_pybf_versions.outputs.versions) }}
    steps:
      - uses: actions/checkout@v4
      - name: Download bf image
        uses: actions/download-artifact@v4
        with:
          name: bf_image
      - name: Download pybf tests
        uses: actions/download-artifact@v4
        with:
          name: pybf_tests
      - name: Download pybf notebooks
        uses: actions/download-artifact@v4
        with:
          name: pybf_notebooks
      - name: Download questions
        uses: actions/download-artifact@v4
        with:
          name: bf_questions
      - name: Start bf
        run: |
          docker load --input bf.tar
          docker run -d --net=host batfish/batfish:test-${{ inputs.bf_version }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Setup pybf
        run: pip install "pybatfish[dev]==${{ matrix.pybf_version }}" "urllib3<2"
      - name: Wait for bf
        run: tests/wait_for_bf.sh
      - name: Run tests
        run: |
          TEMP_DIR=$(mktemp -d)
          tar xzf pybatfish-tests.tgz -C ${TEMP_DIR}
          tar xzf pybatfish-notebooks.tgz -C ${TEMP_DIR}
          pushd ${TEMP_DIR}
          pytest -k "not test_notebook_output" "${TEMP_DIR}/tests/integration"
          popd
      - name: Stop bf
        run: docker stop $(docker ps -q)
  bf_image_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download bf image
        uses: actions/download-artifact@v4
        with:
          name: bf_image
      - name: Download pybf whl
        uses: actions/download-artifact@v4
        with:
          name: pybf_whl
      - name: Download pybf notebooks
        uses: actions/download-artifact@v4
        with:
          name: pybf_notebooks
      - name: Download pybf tests
        uses: actions/download-artifact@v4
        with:
          name: pybf_tests
      - name: Download questions
        uses: actions/download-artifact@v4
        with:
          name: bf_questions
      - name: Set up docker-ce
        uses: docker/setup-docker-action@v4
      - name: Start bf
        run: |
          ls -la bf.tar
          tar tvf bf.tar
          dpkg -l |grep docker
          docker --version
          docker image load --help
          cat /etc/lsb-release
          docker image load --input bf.tar --platform linux/amd64
          docker images
          docker run -d --net=host batfish/batfish:test-${{ inputs.bf_version }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Setup pybf
        run: pip install "$(ls pybatfish-*.whl)"[dev]
      - name: Wait for bf
        run: tests/wait_for_bf.sh
      - name: Run tests
        run: |
          TEMP_DIR=$(mktemp -d)
          tar xzf pybatfish-tests.tgz -C ${TEMP_DIR}
          tar xzf pybatfish-notebooks.tgz -C ${TEMP_DIR}
          pushd ${TEMP_DIR}
          pytest "${TEMP_DIR}/tests/integration"
          popd
      - name: Stop bf
        run: docker stop $(docker ps -q)
#   allinone_image_test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Download allinone image
#         uses: actions/download-artifact@v4
#         with:
#           name: allinone_image
#       - name: Download pybf whl
#         uses: actions/download-artifact@v4
#         with:
#           name: pybf_whl
#       - name: Download pybf notebooks
#         uses: actions/download-artifact@v4
#         with:
#           name: pybf_notebooks
#       - name: Download pybf tests
#         uses: actions/download-artifact@v4
#         with:
#           name: pybf_tests
#       - name: Download questions
#         uses: actions/download-artifact@v4
#         with:
#           name: bf_questions
#       - uses: actions/setup-python@v5
#         with:
#           python-version: 3.9
#       - name: Setup pybf
#         run: pip install "$(ls pybatfish-*.whl)"[dev]
#       - name: Run tests inside allinone container
#         run: |
#           ABS_SOURCE_DIR="$(realpath .)"
#           TEMP_DIR=$(mktemp -d)
#           tar xzf pybatfish-tests.tgz -C ${TEMP_DIR}
#           tar xzf pybatfish-notebooks.tgz -C ${TEMP_DIR}
#           tar xzf questions.tgz -C ${TEMP_DIR}
#           PYBF_WHEEL="$(ls pybatfish-*.whl)"
#           cp ${PYBF_WHEEL} ${TEMP_DIR}
#           docker load --input allinone.tar
#           docker run \
#             -v ${ABS_SOURCE_DIR}/tests/test.sh:/test.sh:ro \
#             -v ${TEMP_DIR}/tests/:/pybatfish/tests/ \
#             -v ${TEMP_DIR}/jupyter_notebooks/:/pybatfish/jupyter_notebooks/ \
#             -v ${TEMP_DIR}/questions/:/pybatfish/questions/ \
#             -v ${TEMP_DIR}/${PYBF_WHEEL}:/pybatfish/dist/${PYBF_WHEEL} \
#             --entrypoint /bin/bash \
#             batfish/allinone:test-${{ inputs.bf_version }} \
#             test.sh
